# -*- mode: ruby -*-
# vi: set ft=ruby :

require "erb"

# Hacked together from
# https://github.com/coreos/coreos-vagrant/blob/master/Vagrantfile

CORE_CLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), "core-cloud-config.yml.erb")
WORK_CLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), "work-cloud-config.yml.erb")
CONFIG = File.join(File.dirname(__FILE__), "config.rb")

# Defaults for config options defined in CONFIG
$num_core_cluster = 1
$num_work_cluster = 1
$instance_name_prefix = "core"
$update_channel = "alpha"
$image_version = "current"
$enable_serial_logging = false
$share_home = false
$vm_gui = false
$vm_memory = 1024
$vm_cpus = 4
$shared_folders = {}
$forwarded_ports = {}

if File.exist?(CONFIG)
    require CONFIG
end

def vm_gui
      $vb_gui.nil? ? $vm_gui : $vb_gui
end

def vm_memory
      $vb_memory.nil? ? $vm_memory : $vb_memory
end

def vm_cpus
      $vb_cpus.nil? ? $vm_cpus : $vb_cpus
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
    config.vm.box = "coreos-%s" % $update_channel
    if $image_version != "current"
        config.vm.box_version = $image_version
    end
    config.vm.box_url = "https://storage.googleapis.com/%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json" % [$update_channel, $image_version]

    config.vm.provider :virtualbox do |v|
        # On VirtualBox, we don't have guest additions or a functional vboxsf
        # in CoreOS, so tell Vagrant that so it can be smarter.
        v.check_guest_additions = false
        v.functional_vboxsf     = false
    end

    (1..$num_core_cluster).each do |i|
        config.vm.define vm_name = "%s-%02d" % [$core_name_prefix, i] do |config|
            config.vm.hostname = vm_name

            config.vm.provider :virtualbox do |vb|
                vb.gui = vm_gui
                vb.memory = vm_memory
                vb.cpus = vm_cpus
            end

            # Should be the subnet of the DHCP host-discovery server, outside the offer range
            # TODO: The subnet should be read from properties so we know the DHCP subnet and this match
            # Even though auto_config is off we still have to set an ip or vagrant will fail.
            ip = "10.0.3.#{i.to_i+10}"
            config.vm.network :private_network, type: "static", ip: ip, virtualbox__intnet: "NatNetwork1", auto_config: false

            if File.exist?(CORE_CLOUD_CONFIG_PATH)
                ccb = CloudConfigBindings.new(ip, $new_disco_url)
                template = ERB.new File.new(CORE_CLOUD_CONFIG_PATH).read, nil, "%"
                res = template.result(ccb.get_binding)
                config.vm.provision :file do |file|
                    File.write("ccc#{i}", res)
                    file.source      = "ccc#{i}"
                    file.destination = '/tmp/vagrantfile-user-data'
                end
                config.vm.provision :shell, :inline => "cp /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
            end
        end
    end

    (1..$num_work_cluster).each do |i|
        config.vm.define vm_name = "%s-%02d" % [$worker_name_prefix, i] do |config|
            config.vm.hostname = vm_name

            config.vm.provider :virtualbox do |vb|
                vb.gui = vm_gui
                vb.memory = vm_memory
                vb.cpus = vm_cpus
            end

            # Workers use DHCP, but vagrant enforces setting an IP on an interface at config time
            # so set an IP in the DHCP offer range to avoid conflicts with the static IP's for the
            # core cluster while the workes are starting.
            ip = "10.0.3.#{i.to_i+100}"
            config.vm.network :private_network,  ip: ip, virtualbox__intnet: "NatNetwork1", auto_config: false

            if File.exist?(WORK_CLOUD_CONFIG_PATH)
                ccb = CloudConfigBindings.new(ip, $new_disco_url, vm_name + ".orc.com")
                template = ERB.new File.new(WORK_CLOUD_CONFIG_PATH).read, nil, "%"
                res = template.result(ccb.get_binding)
                config.vm.provision :file do |file|
                    File.write("wcc#{i}", res)
                    file.source      = "wcc#{i}"
                    file.destination = '/tmp/vagrantfile-user-data'
                end
                config.vm.provision :shell, :inline => "cp /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
            end

#            if File.exist?(WORK_CLOUD_CONFIG_PATH)
#                config.vm.provision :file, :source => "#{WORK_CLOUD_CONFIG_PATH}", :destination => "/tmp/vagrantfile-user-data"
#                config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true
#            end
        end
    end
end
